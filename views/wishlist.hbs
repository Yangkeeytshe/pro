<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  <style>
    .wishlist-container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 2rem;
      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
      min-height: 100vh;
    }

    .wishlist-header {
      text-align: center;
      margin-bottom: 2rem;
      background: rgba(255, 255, 255, 0.9);
      padding: 2rem;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .wishlist-header h1 {
      color: #8B4513;
      font-size: 2.5rem;
      margin-bottom: 0.5rem;
    }

    .wishlist-stats {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 1rem;
      flex-wrap: wrap;
    }

    .stat-item {
      text-align: center;
    }

    .stat-number {
      font-size: 2rem;
      font-weight: bold;
      color: #8B4513;
    }

    .stat-label {
      color: #666;
      font-size: 0.9rem;
    }

    .wishlist-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-top: 2rem;
      padding: 0.5rem;
    }

    .wishlist-item {
      background: #ffffff;
      border-radius: 20px;
      padding: 2rem;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      border: 1px solid #e0e0e0;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      height: 100%;
      position: relative;
      overflow: hidden;
    }

    .wishlist-item:hover {
      transform: translateY(-8px);
      box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
      border-color: #d0d0d0;
    }

    .item-image {
      width: 100%;
      height: 230px;
      object-fit: cover;
      border-radius: 15px;
      margin-bottom: 1.5rem;
      transition: transform 0.3s ease;
    }

    .item-image:hover {
      transform: scale(1.02);
    }

    .item-details h3 {
      color: #8B4513;
      margin-bottom: 0.5rem;
      font-size: 1.2rem;
    }

    .item-price {
      font-size: 1.5rem;
      font-weight: bold;
      color: #D2691E;
      margin: 0.5rem 0;
    }

    .item-description {
      color: #666;
      font-size: 0.9rem;
      margin-bottom: 1rem;
      line-height: 1.4;
    }

    .item-actions {
      display: flex;
      gap: 0.75rem;
      margin-top: auto;
      padding-top: 1rem;
      flex-wrap: wrap;
    }

    .btn {
      flex: 1 1 auto;
      padding: 0.875rem 1rem;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      font-weight: 600;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
      font-size: 0.85rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      position: relative;
      overflow: hidden;
    }

    .btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }

    .btn-primary {
      background: linear-gradient(135deg, var(--primary-color), #0e8aa940);
      color: white;
      box-shadow: 0 4px 15px rgba(139, 69, 19, 0.3);
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, var(--primary-color));
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(139, 69, 19, 0.4);
    }

    .btn-danger {
      background: linear-gradient(135deg, #dc3545 0%, #c823335d 100%);
      color: white;
      box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }

    .btn-danger:hover {
      background: linear-gradient(135deg, #c82333 0%, #bd2130 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
    }

    .btn-secondary {
      background:linear-gradient(135deg, var(--primary-color), #0e8aa940);
      color: white;
      box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }

    .btn-secondary:hover {
      background: linear-gradient(135deg, #20c997 0%, #17a2b8 100%);
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(40, 167, 69, 0.4);
    }

    .empty-wishlist {
      text-align: center;
      background: rgba(255, 255, 255, 0.9);
      padding: 2.5rem 1.5rem;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .empty-wishlist i {
      font-size: 3rem;
      color: #ccc;
      margin-bottom: 1rem;
    }

    .empty-wishlist h2 {
      color: #8B4513;
      margin-bottom: 1rem;
    }

    .empty-wishlist p {
      color: #666;
      margin-bottom: 2rem;
    }

    .added-date {
      font-size: 0.8rem;
      color: #999;
      margin-bottom: 0.5rem;
    }

    .stock-status {
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      font-size: 0.8rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      display: inline-block;
    }

    .in-stock {
      background: #d4edda;
      color: #155724;
    }

    .out-of-stock {
      background: #f8d7da;
      color: #721c24;
    }

    @media (max-width: 480px) {
      .wishlist-container {
        padding: 0.5rem;
      }

      .wishlist-header h1 {
        font-size: 1.8rem;
      }

      .wishlist-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .wishlist-item {
        padding: 1rem;
      }

      .item-image {
        height: 170px;
      }

      .btn {
        padding: 0.75rem;
        font-size: 0.75rem;
      }
    }
    
    @media (max-width: 788px) {
      .wishlist-container {
        padding: 0.5rem;
        margin-top: 200px;
      }

      .wishlist-header h1 {
        font-size: 1.8rem;
      }

      .wishlist-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .wishlist-item {
        padding: 1rem;
      }

      .item-image {
        height: 170px;
      }

      .btn {
        padding: 0.75rem;
        font-size: 0.75rem;
      }
    }

  </style>
<body>
  {{> header}}

  <div class="wishlist-container">
    <div class="wishlist-header">
      <h1><i class="fas fa-heart"></i> My Wishlist</h1>
      <div class="wishlist-stats">
        <div class="stat-item">
          <div class="stat-number">{{wishlistCount}}</div>
          <div class="stat-label">Items Saved</div>
        </div>
      </div>
    </div>

    {{#if wishlistItems.length}}
      <div class="wishlist-grid">
        {{#each wishlistItems}}
          <div class="wishlist-item" data-product-id="{{this.id}}">
            <img src="{{this.image}}" alt="{{this.name}}" class="item-image">

            <div class="item-content">
              <div class="added-date">
                <i class="fas fa-calendar-alt"></i> Added {{formatDate this.added_date}}
              </div>

              <h3>{{this.name}}</h3>

              <div class="item-price">Nu. {{this.price}}</div>

              <div class="item-description">{{this.category}} - Traditional Bhutanese Clothing</div>

              <div class="stock-status in-stock">
                <i class="fas fa-check-circle"></i> Available
              </div>

              <div class="item-actions">
                <a href="/product/{{this.id}}" class="btn btn-primary">
                  <i class="fas fa-eye"></i> View
                </a>

                <button class="btn btn-secondary add-to-cart-btn" data-product-id="{{this.id}}">
                  <i class="fas fa-shopping-cart"></i> Add Cart
                </button>

                <button class="btn btn-danger remove-from-wishlist-btn" data-product-id="{{this.id}}">
                  <i class="fas fa-trash"></i> Remove
                </button>
              </div>
            </div>
          </div>
        {{/each}}
      </div>
    {{else}}
      <div class="empty-wishlist">
        <i class="fas fa-heart-broken"></i>
        <h2>Your wishlist is empty</h2>
        <p>Start adding products you love to keep track of them!</p>
        <a href="/shop" class="btn btn-primary">
          <i class="fas fa-shopping-bag"></i> Start Shopping
        </a>
      </div>
    {{/if}}
  </div>

  {{> footer}}

  <script>
    // Debug function
    function debugLog(message, data = null) {
      console.log(`[Wishlist Debug] ${message}`, data);
    }

    // Remove from wishlist functionality
    document.querySelectorAll('.remove-from-wishlist-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const productId = this.dataset.productId;
        const wishlistItem = this.closest('.wishlist-item');
        const productName = wishlistItem.querySelector('h3').textContent;

        debugLog(`Remove button clicked for product ${productId}: ${productName}`);

        // Confirm removal
        if (!confirm(`Remove "${productName}" from your wishlist?`)) {
          debugLog('User cancelled removal');
          return;
        }

        try {
          debugLog(`Making DELETE request to /api/wishlist/remove/${productId}`);

          const response = await fetch(`/api/wishlist/remove/${productId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json'
            }
          });

          debugLog('Response received', { status: response.status, ok: response.ok });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          debugLog('Response data', data);

          if (data.success) {
            // Remove the item from the page with animation
            wishlistItem.style.transition = 'all 0.5s ease-out';
            wishlistItem.style.transform = 'translateX(-100%)';
            wishlistItem.style.opacity = '0';

            setTimeout(() => {
              wishlistItem.remove();

              // Check if wishlist is now empty
              const remainingItems = document.querySelectorAll('.wishlist-item');
              if (remainingItems.length === 0) {
                location.reload(); // Reload to show empty state
              } else {
                // Update count
                const countElement = document.querySelector('.stat-number');
                if (countElement) {
                  countElement.textContent = remainingItems.length;
                }
              }
            }, 500);

            // Show success message
            showNotification(`${productName} removed from wishlist`, 'success');
          } else {
            showNotification(data.message || 'Failed to remove from wishlist', 'error');
          }
        } catch (error) {
          console.error('Remove from wishlist error:', error);
          showNotification('An error occurred while removing from wishlist', 'error');
        }
      });
    });

    // Add to cart functionality
    document.querySelectorAll('.add-to-cart-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const productId = this.dataset.productId;
        const wishlistItem = this.closest('.wishlist-item');
        const productName = wishlistItem.querySelector('h3').textContent;

        debugLog(`Add to cart button clicked for product ${productId}: ${productName}`);

        try {
          debugLog(`Making POST request to /api/cart/quick-add/${productId}`);

          // Use the correct cart API endpoint
          const response = await fetch(`/api/cart/quick-add/${productId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              quantity: 1
            })
          });

          debugLog('Add to cart response received', { status: response.status, ok: response.ok });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          debugLog('Add to cart response data', data);

          if (data.success) {
            showNotification(`${productName} added to cart`, 'success');
            // Disable button temporarily
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-check"></i> Added';
            setTimeout(() => {
              this.disabled = false;
              this.innerHTML = '<i class="fas fa-shopping-cart"></i> Add Cart';
            }, 2000);

            // Update cart count in header
            updateCartCount();
          } else {
            showNotification(data.message || 'Failed to add to cart', 'error');
          }
        } catch (error) {
          console.error('Add to cart error:', error);
          showNotification('An error occurred while adding to cart', 'error');
        }
      });
    });

    // Utility functions
    function showNotification(message, type) {
      // Create notification element
      const notification = document.createElement('div');
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 2rem;
        border-radius: 5px;
        color: white;
        font-weight: bold;
        z-index: 1000;
        animation: slideIn 0.3s ease-out;
        ${type === 'success' ? 'background: #28a745;' : 'background: #dc3545;'}
      `;
      
      document.body.appendChild(notification);
      
      // Remove after 3 seconds
      setTimeout(() => {
        notification.style.animation = 'slideOut 0.3s ease-out';
        setTimeout(() => notification.remove(), 300);
      }, 3000);
    }

    function updateCartCount() {
      // Update cart count in header if element exists
      fetch('/api/cart/count')
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
              cartCountElement.textContent = data.count;
            }
            // Also update any other cart count displays
            const cartBadge = document.querySelector('.cart-badge');
            if (cartBadge) {
              cartBadge.textContent = data.count;
            }
          }
        })
        .catch(error => console.error('Error updating cart count:', error));
    }

    // Add CSS animations
    const style = document.createElement('style');
    style.textContent = `
      @keyframes fadeOut {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.8); }
      }
      
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      
      @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `;
    document.head.appendChild(style);
  </script>
</body>
</html>
